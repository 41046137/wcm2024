<h1>About</h1>
<p><img alt="" height="481" src="/images/內容更新.png" width="481"/></p>
<p>網頁: <a href="https://mde.tw/wcm2024/">https://mde.tw/wcm2024</a></p>
<p>網誌: <a href="https://mde.tw/wcm2024/blog">https://mde.tw/wcm2024/blog</a> ；<a href="https://41046137.github.io/wcm2024/content/%E4%B8%8A%E8%AA%B2%E5%BF%83%E5%BE%97.html">https://41046137.github.io/wcm2024/content/%E4%B8%8A%E8%AA%B2%E5%BF%83%E5%BE%97.html</a></p>
<p>簡報: <a href="https://mde.tw/wcm2024/reveal">https://mde.tw/wcm2024/reveal</a> </p>
<p>倉儲: <a href="https://github.com/mdecycu/wcm2024">https://github.com/mdecycu/wcm2024</a> </p>
<p></p>
<h1>程式執行</h1>
<p><span>以下的 html 取自: </span><a href="https://mde.tw/wcm2024/downloads/brython_on_editor.txt">https://mde.tw/wcm2024/downloads/brython_on_editor.txt</a></p>
<hr/>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>專題</h1>
<p><a href="https://mdewcm2024.github.io/1astud-site/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/bde21a478f52f831d48a13e997d7965126f950fc/1a_w11_step2.py">列出修課學員的倉儲與網站連結</a></p>
<p><span>已知可以從 </span><a href="https://mdewcm2024.github.io/1astud-site/downloads/1a.txt">https://mdewcm2024.github.io/1astud-site/downloads/1a.txt</a><span> 取得學員的學號與帳號資料，使用 Brython 可以設法利用 Python 語法對此資料進行處理。</span></p>
<p>第一步，先取得資料，然後將每一行內容隔開後，放入數列備用。</p>
<p>若將下列 Brython 程式碼放入 Gist，然後利用網站的  Brython 頁面，以 src 作為資料網誌的內容，就可以直接在網站上<a href="https://mdewcm2024.github.io/1astud-site/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/8ba6fa28317bc7a784d8350e7bc33580/raw/b2d664b595b11da83bf8f9a1ab39c774ba5861b6/1a_w10_step1.py">執行第一步程式</a>。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax
  
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"
  
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
  
      # 依照換行符號拆分資料
      lines = content.split('\n')
  
      # 建立空列表儲存資料
      data = []
  
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
  
        # 依照逗號拆分資料
        items = line.split(',')
  
        # 將拆分後的資料加入列表
        data.append(items)
  
      # 印出結果
      print(data)
    else:
      print("Error:", req.text)
  
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
  
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<h1>期中期末專案</h1>
<h2>期末實作</h2>
<p>在期末實作中，我利用Portable在近端中使用html和JavaScript，去製作一個小遊戲。<br/>遊戲名稱：五子棋<br/>創建方式：透過AI反覆除錯。</p>
<p>目前所遇到的問題是，雖然目前版本AI可以進行防禦和進攻了，但是仍然不智慧，不會去設法想進攻和防禦策略，這此版本中，目前是最好的一個版本，雖多次進行改善(20+)，仍然還是問題相同，導致這個遊戲版本，我方獲勝幾乎可以全勝。<br/>以下為他的代碼code，但因為是近端製作的關係，若日後還要再開啟的話，就還是必須要再次把代碼執行，希望往後版本可以改善這個問題。</p>
<p>遊戲特色：</p>
<p><img caption="false" height="500" src="/images/五子棋主畫面.png" width="509"/></p>
<p>待改善清單：</p>
<ul>
<li>AI沒有智慧，不會採去進攻和防禦策略(但玩家在試圖獲勝時，仍然會抵擋，但幾乎沒有效果)</li>
<li>此版本開啟方式需要整合與調整。調整為大家一般可以開啟的狀態而非使用代碼。</li>
<li>遊戲介面的更新與調整。(可能會新增更豐富的畫面、獲勝與敗北的動畫、與介面的調整(因目前介面十分簡陋，所以希望可以更加美觀)。</li>
<li>若AI仍無法像人類一樣有更加多元的防守與進攻策略，那可以新增一些規則來限制人類(如一開始就隨機分配先攻選手，這樣或許可以給予我們一些壓力)。</li>
<li>待改善AI只會一直列的進攻。</li>
</ul>
<p>        待改善清單內容尚更新中...</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;五子棋遊戲&lt;/title&gt;
    &lt;style&gt;
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #board {
            display: grid;
            grid-template-columns: repeat(15, 30px);
            grid-template-rows: repeat(15, 30px);
            gap: 1px;
        }
        .cell {
            width: 30px;
            height: 30px;
            background-color: lightgray;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid black;
        }
        .piece {
            width: 80%;
            height: 80%;
            border-radius: 50%;
            background-color: lightgray;
        }
        .player {
            background-color: blue;
        }
        .ai {
            background-color: red;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;五子棋遊戲&lt;/h1&gt;
    &lt;div id="board"&gt;&lt;/div&gt;
    &lt;button onclick="resetGame()"&gt;重置遊戲&lt;/button&gt;
    &lt;p&gt;玩家得分: &lt;span id="playerScore"&gt;0&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;對手得分: &lt;span id="aiScore"&gt;0&lt;/span&gt;&lt;/p&gt;

    &lt;script&gt;
        const board = document.getElementById('board');
        const playerScoreElem = document.getElementById('playerScore');
        const aiScoreElem = document.getElementById('aiScore');

        let boardState = Array(15).fill().map(() =&gt; Array(15).fill(0));
        let playerScore = 0;
        let aiScore = 0;

        function createBoard() {
            board.innerHTML = '';
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    cell.addEventListener('click', playerMove);
                    board.appendChild(cell);
                }
            }
        }

        function playerMove(event) {
            const x = parseInt(event.target.dataset.x);
            const y = parseInt(event.target.dataset.y);
            if (boardState[y][x] === 0) {
                boardState[y][x] = 1;
                event.target.appendChild(createPiece('player'));
                if (checkWinner(1)) {
                    alert('玩家獲勝！');
                    playerScore++;
                    updateScores();
                    resetGame();
                    return;
                }
                setTimeout(aiMove, 500);
            }
        }

        function aiMove() {
            let move = findWinningMove(2) || findWinningMove(1) || findPotentialThreat(2) || findPotentialThreat(1) || findRandomMove();
            if (move) {
                boardState[move.y][move.x] = 2;
                const cell = board.querySelector(`[data-x='${move.x}'][data-y='${move.y}']`);
                cell.appendChild(createPiece('ai'));
                if (checkWinner(2)) {
                    alert('對手獲勝！');
                    aiScore++;
                    updateScores();
                    resetGame();
                    return;
                }
            }
        }

        function findWinningMove(player) {
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        boardState[y][x] = player;
                        if (checkWinner(player)) {
                            boardState[y][x] = 0;
                            return { x, y };
                        }
                        boardState[y][x] = 0;
                    }
                }
            }
            return null;
        }

        function findPotentialThreat(player) {
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        boardState[y][x] = player;
                        if (checkPotentialThreat(player)) {
                            boardState[y][x] = 0;
                            return { x, y };
                        }
                        boardState[y][x] = 0;
                    }
                }
            }
            return null;
        }

        function checkPotentialThreat(player) {
            const directions = [
                { dx: 1, dy: 0 }, 
                { dx: 0, dy: 1 }, 
                { dx: 1, dy: 1 }, 
                { dx: 1, dy: -1 }
            ];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === player) {
                        for (let { dx, dy } of directions) {
                            if (checkThreatDirection(x, y, dx, dy, player)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        function checkThreatDirection(x, y, dx, dy, player) {
            let count = 0;
            for (let i = 0; i &lt; 5; i++) {
                const nx = x + i * dx;
                const ny = y + i * dy;
                if (nx &gt;= 0 &amp;&amp; nx &lt; 15 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 15 &amp;&amp; boardState[ny][nx] === player) {
                    count++;
                } else {
                    break;
                }
            }
            return count &gt;= 3; // Consider a position a threat if there are 3 in a row
        }

        function findRandomMove() {
            let moves = [];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === 0) {
                        moves.push({ x, y });
                    }
                }
            }
            return moves.length ? moves[Math.floor(Math.random() * moves.length)] : null;
        }

        function createPiece(playerClass) {
            const piece = document.createElement('div');
            piece.classList.add('piece', playerClass);
            return piece;
        }

        function checkWinner(player) {
            const directions = [
                { dx: 1, dy: 0 }, 
                { dx: 0, dy: 1 }, 
                { dx: 1, dy: 1 }, 
                { dx: 1, dy: -1 }
            ];
            for (let y = 0; y &lt; 15; y++) {
                for (let x = 0; x &lt; 15; x++) {
                    if (boardState[y][x] === player) {
                        for (let { dx, dy } of directions) {
                            if (checkDirection(x, y, dx, dy, player)) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        function checkDirection(x, y, dx, dy, player) {
            let count = 0;
            for (let i = 0; i &lt; 5; i++) {
                const nx = x + i * dx;
                const ny = y + i * dy;
                if (nx &gt;= 0 &amp;&amp; nx &lt; 15 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 15 &amp;&amp; boardState[ny][nx] === player) {
                    count++;
                } else {
                    break;
                }
            }
            return count === 5;
        }

        function updateScores() {
            playerScoreElem.textContent = playerScore;
            aiScoreElem.textContent = aiScore;
        }

        function resetGame() {
            boardState = Array(15).fill().map(() =&gt; Array(15).fill(0));
            createBoard();
        }

        createBoard();
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p></p>
<h1>Blog</h1>
<h2>上課心得</h2>
<p>第一週</p>
<p>   本週講述了課堂模式及規劃、並設立了自己的個人網站。<br/>   利用Replit來建立我們的個人網站、修正網站標題。</p>
<p><span>第二週</span></p>
<p><span>   本週確認每個人都有建立好自己的個人網站、</span>利用 Replit 維護網站。<br/>並妥善利用git. 將每次改版的內容詳細記載。這個動作的目的為可以保留歷程記錄，更能讓人知道我們在網站上變更了什麼，同時可以用改版資料來讓人信服。</p>
<p><span>第三週</span></p>
<p>   <span>本週進行了小組分組(</span>利用 Github Classroom 建立分組網站<span>)。本週講述了</span>常用的 git 指令。<br/>以下為基本的git指令介紹：</p>
<ul>
<li><strong>git add .</strong>：這個指令會將工作目錄中的所有變更加入到暫存區（<span>staging area</span>）。這包括新檔案、修改過的檔案和已刪除的檔案。</li>
<li><strong>git push</strong>：這個指令會將本地的提交推送到遠端倉儲。如果你在一個分支上工作，這個指令會將你的本地分支推送到遠端倉儲。</li>
<li><strong>git pull</strong>：這個指令會從遠端倉儲拉取最新的變更並合併到你當前的分支。這實際上是<span>git fetch</span>和<span>git merge</span>的組合。</li>
<li><strong>git config</strong>：這個指令用於設定<span>Git</span>的配置細節，如使用者名稱、電子郵件地址等。</li>
<li><strong>git submodule add 倉儲網址 子目錄</strong>：這個指令會將一個<span>Git</span>倉儲作為子模組加入到當前倉儲。子模組允許你在一個倉儲中包含另一個倉儲。</li>
<li><strong>git clone 倉儲網址_協定.git 指定目錄與否</strong>：這個指令會從提供的<span>URL</span>複製一個<span>Git</span>倉儲到本地機器。如果提供了一個目錄名稱，<span>Git</span>會在那個目錄中創建一個新的倉儲；否則，<span>Git</span>會在當前目錄中創建一個與倉儲名稱相同的目錄。(其中協定大多使用https)。</li>
</ul>
<p><span>第四週</span></p>
<p>   <span>本週講述了  網際網路之定義(包含WWW定義、協定等)、Replit, Codespaces 與 Github 執行動態與靜態網站<br/></span></p>
<p>至於 <strong><span style="text-decoration: underline;">Replit, Codespaces 與 Githu</span>b</strong>，它們都是開發環境，可以用來執行動態和靜態網站：</p>
<p><strong>Replit</strong>：可以在<span> Replit </span>上執行動態網站，指令為<span> python3 main.py</span>。而執行靜態網站則需要在<span> Shell </span>執行<span> python3 main2.py</span>。</p>
<p><strong>Codespaces</strong>：目前我沒有找到特定的資訊關於如何在<span> Codespaces </span>上執行動態或靜態網站。然而，<span>Codespaces </span>是一個完整的開發環境，因此理論上可以運行任何類型的網站，只要有適當的設定和依賴性。</p>
<p><strong>Github</strong>：在<span> Github </span>中，執行動態網站的指令為<span> python3 main.py。</span></p>
<p><span>第五週</span></p>
<p><span>   本週講述了 </span><yt-formatted-string class="style-scope ytd-watch-metadata" force-default-style="">Replit 平台上的分組倉儲權限設定、</yt-formatted-string>如何在 Replit 執行靜態網站檢視。<br/>第七週<br/>   為清明節放假。</p>
<p><span>第六週<br/></span></p>
<p>   本週講述了 <span>Git的</span>歷史與希望解決的問題、如何應用ChatGPT解決不同專業的問題還有用Gitit解決產品設計問題。</p>
<p>   利用現金越來越發達的AI，幫助我們在往日遇到問題時，可以有個解決對象。</p>
<p><span>第八週</span></p>
<p><span>   本週討論了教育本質，透過教育來讓學生可以了解世界的真相、謎團等等，也培育學生的各方面領域、性格、技術等等。</span></p>
<p><span>第九週</span></p>
<p><span>   本週為期中考週，老師讓我們自行評量期中成績，大家對於自己的成績都打得很謙虛。本週也因為期中考週，所以老師讓我們提早下課，而我也跑去問老師問題，也解決了疑惑。</span></p>
<p><span>第十週</span></p>
<p><span>   本週老師先讓我們加入了專題分組作業群組，然後講解了各式內容，要進行python的相關應用，在加入資料途中，發現了許多問題，但是在我回去翻閱過往的教學影片後，得到了解決，即使面對git push 失敗，我仍嘗試解決問題來源，最終將進度完成。</span></p>
<p><span>第十一週</span></p>
<p><span>本週老師操作了<span style="text-decoration: underline; background-color: #ffff99;"><strong>如何利用replit 來進行1astud-site管理網站頁面</strong></span>，在實際操作時，因為有多數同學因操作而造成各種衝突(可能主因為沒有建立分支)，導致我們這組遲遲無法進行上傳g8頁面，而我們小組成員都無能為力，但是經過一番努力及討教，我們終於成功解決一些衝突，並順利建立g8頁面，也特別感謝我們組員的幫助下，👍讓我們順利完成這個作業✌️。<br/>●<strong><span style="background-color: #ffff99;">老師所要講述的是，我們必須要透過自行解決問題的能力來面對外來千變萬幻的新穎問題，不僅僅是透過學習，也可以透過詢問現今日漸崛起的AI技術來幫助我們解決問題。善用這些工具，幫助我們解決各種問題、衝突。</span></strong><br/><br/><span style="color: #ff0000;">※利用git pull整合、合併，在來使用git status-&gt;git push。當然前提是衝突已被解決。<br/></span></span><strong>當然要編輯網頁內容可以使用的工具有:</strong></p>
<ol>
<li><strong>使用github</strong></li>
<li><strong>使用Replit</strong></li>
<li><strong>使用靜端操作</strong></li>
<li><strong>使用CodeSpaces</strong></li>
</ol>
<p>第十二週</p>
<p><span>   本週探討在</span><span>1astud-site 解決衝突、分支內容。<br/>透過先查詢目前分支名稱後(git branch)，以切換到所想要的分支(git checkout)。<br/>解決衝突的部分在於要先了解目前所發生的衝突(Search =======)。<br/>至於：</span><span style="text-decoration: underline;"><strong>Responsive site </strong></span>根據您的瀏覽器的硬體的設置而形成最適大小。</p>
<p><span>第十三週</span></p>
<p>   本週如何從學校網站抓取課堂資料，因應隱私權問題，所以只能抓取班級課表。<br/>再進行操作後，發現均不順利，依靠先前的影片才得以解決。<br/>在與老師交談後，發現我只是按照老師的步驟執行，而並，所以我可能還要再多加努力學習才行。多加努力學習才行。</p>
<p><span>ajax</span>緩衝區 利用前端和非同步的方式來與伺服器進行取得資料庫。<span><br/> </span>網頁伺服器或客戶端至少<span>’</span>有<span>”Post</span>、<span>client”<br/> get</span></p>
<p><span>column </span>來抓取學生資料，與班級課堂較無關。</p>
<p>所需要的資料為<span> Flask</span>、<span>Flask-Core。</span></p>
<p><span style="background-color: #ff99cc;"><strong>目前使用將code複製回去Portable 再使用tools工具下的go去執行。(不要扣分🥹🥹)</strong></span></p>
<p><span>第十四週</span></p>
<p><span>   本週探討python不同版本的差異(以新版本去修正舊版本的不足)及改版猜數字遊戲。還有解釋SET、REM。<br/></span></p>
<p>因原先的猜數字遊戲，電腦會一直猜，而導致分數越來越高；而修正後改成電腦和猜與者各猜一次。</p>
<p>在<span> Python </span>中，<span>REM </span>和<span> SET</span>這兩個詞在其他程式語言或環境中有特定的含義，例如在<span> Windows </span>的批次檔案（<span>Batch file</span>）中，<span>REM </span>用於添加註解，而<span> SET </span>用於設定或更改環境變數。</p>
<p><span> 例如：</span></p>
<p>在這個<span> Python </span>程式中，我們使用<span> # </span>來添加註解，使用<span> = </span>來設定變數<span> x </span>的值為<span> 10</span>，然後<span> print(x) </span>用於顯示變數<span> x </span>的值。</p>
<p><span></span></p>
<p><span>在猜數字遊戲中：(未改版前)<br/>比分如下：</span></p>
<ul id="player-list">
<li>01411 (Score: 0, Guesses: 0)</li>
<li>壹號&lt;3 (Score: 0, Guesses: 0)</li>
<li>41046109-2 (Score: 0, Guesses: 0)</li>
<li>41023218 (Score: 0, Guesses: 0)</li>
<li>41046109-1 (Score: 0, Guesses: 0)</li>
<li>1 (Score: 0, Guesses: 0)</li>
<li>零號 (Score: 0, Guesses: 0)</li>
<li>承認失敗 (Score: 0, Guesses: 0)</li>
<li>41223120 (Score: 0, Guesses: 0)</li>
<li>ni**a (Score: 7, Guesses: 0)</li>
<li>41223126 (Score: 30, Guesses: 0)</li>
<li>41223101 (Score: 0, Guesses: 0)</li>
<li>20 (Score: 1, Guesses: 0)</li>
<li>41223153 (Score: 0, Guesses: 0)</li>
<li>41145405 (Score: 0, Guesses: 0)</li>
<li>0 (Score: 0, Guesses: 0)</li>
<li>10 (Score: 0, Guesses: 0)</li>
<li>41046109 (Score: 15, Guesses: 0)</li>
<li>41223129 (Score: 0, Guesses: 0)</li>
<li>34 (Score: 0, Guesses: 0)</li>
<li>41223136 (Score: 1, Guesses: 0)</li>
<li>54 (Score: 1, Guesses: 0)</li>
<li><span style="color: #ff0000;"><strong><span style="background-color: #ffff00;">41046137 (Score: 62, Guesses: 0)</span></strong></span></li>
<li>41223118 (Score: 5, Guesses: 0)</li>
<li>computer (Score: 3390, Guesses: 1)</li>
<li>50703199 (Score: 0, Guesses: 0)</li>
</ul>
<p><span>我得到62分，但是電腦猜數字的分數卻遠遠高於我們人類，所以未來AI的智慧和功能會取代人類很大的地步，而我們必須從其他方面來去補足這個差異(如人性化)。</span></p>
<p><span>在猜數字遊戲中：(改版後)<br/>比分如下：</span></p>
<ul id="player-list">
<li><strong><span style="background-color: #ffff00; color: #ff0000;">41046137 (Score: 23, Guesses: 0)</span></strong></li>
<li>41046109 (Score: 6, Guesses: 2)</li>
<li>computer (Score: 52, Guesses: 2)</li>
<li>test (Score: 0, Guesses: 0)</li>
</ul>
<p>不管哪種版本，AI的成績均比我們人類還高，可見人工智慧的強大。</p>
<p></p>
<p>第十五週</p>
<p>  本週一開始就先點名，而後開始進入正題，教導我們使用近端來去產生網誌文章產生器，而後繼續使用近端來去產生簡報編輯器，並將各自均存放下來。</p>
<p><br/>以下為各自的代碼。</p>
<p>在製作過程都有產生一些問題，像是一開始影片無法加入。但是經過網路查詢也找到了一些不同的方法來加入影片，最終有兩種結論。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">---
Title: w15 說明如何利用 Web-based程式協助設計
Date: 2024-05-30 10:22
Category: Pelican, w15
Tags: web-based, javascript
Slug: w15 說明如何利用 Web-based程式協助設計
Author: 41046137
---

w15 說明如何利用 Web-based程式協助設計

&lt;!-- PELICAN_END_SUMMARY --&gt;

# test 1

test 1

# test 2

test 2

</pre>
<p></p>
<p>而簡報編輯器code如下：<strong><span style="background-color: #ffff00; color: #ff0000;"><a href="https://41046137.github.io/wcm2024/content/w15.html" style="background-color: #ffff00; color: #ff0000;">(在週次進度下的第十五週也有)</a></span></strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;section&gt;&lt;h2&gt;w15 說明如何利用 Web-based程式協助設計&lt;/h2&gt;&lt;img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbqj9Ii13d6hx5a9kyLnC5A8A96LDSaSZv_w&amp;s" alt="github的logo"&gt;&lt;/img&gt;&lt;iframe src="https://www.youtube.com/embed/PKmqI_FaliI?si=3LrNzLZ95yI4Duns" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/section&gt;</pre>
<p>第十六週<br/>   本週老師首先解惑了同學的問題，利用近端來去維護網站，之後就讓我們到表單填寫期末自評。<br/>第十七週<br/>   本週老師一樣讓我們自評成績，參考了缺席率、週次進度、回家自主練習等等。<br/>透過這次的自評，讓我具體了解在這門課中學到了什麼，不論是老師平常在課堂中希望我們可以更加精進，不論是使用何種方式進行強化與學習，例如透過AI來幫助我們學習，並希望我們自己了解代碼內容，可以知道更多人性化的改版。</p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Codespaces</h1>
<p><a href="https://scrum-1.github.io/wcm2024">https://scrum-1.github.io/wcm2024</a> </p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p dir="auto"></p>
<h1>週次進度</h1>
<h2>w15</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;section&gt;
  &lt;h2&gt;簡報標題&lt;/h2&gt;&lt;img src="圖片網址" alt="圖片說明"&gt;&lt;/img&gt;&lt;iframe src="https://www.youtube.com/watch?v=fjheqtLYATg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/section&gt;</pre>
<p>以下為更正後：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;section&gt;&lt;h2&gt;w15 說明如何利用 Web-based程式協助設計&lt;/h2&gt;&lt;img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbqj9Ii13d6hx5a9kyLnC5A8A96LDSaSZv_w&amp;s" alt="github的logo"&gt;&lt;/img&gt;&lt;iframe src="https://www.youtube.com/embed/PKmqI_FaliI?si=3LrNzLZ95yI4Duns" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/section&gt;</pre>
<p>另外我也找到其他入刊影片網址以免被youtube網站拒絕存取</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;section&gt;&lt;h2&gt;w15 說明如何利用 Web-based程式協助設計&lt;/h2&gt;&lt;img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbqj9Ii13d6hx5a9kyLnC5A8A96LDSaSZv_w&amp;s" alt="github的logo"&gt;&lt;/img&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class='embed-container'&gt;&lt;iframe width='560' height='315' src='https://www.youtube-nocookie.com/embed/83g9NFbtR_k?rel=0' frameborder='0' allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/section&gt;</pre>
<p><br/><br/><br/><br/><br/></p>
<p></p>
<p></p>
<p><br/><br/></p>
<h2>w13</h2>
<p>-------------------</p>
<p>Multiplayer Guessing Game</p>
<p>請猜介於 1 ~ 100 的整數: <br/><br/></p>
<div id="loginContainer"><label for="name">Name:</label> <input id="name" placeholder="Enter your name" type="text"/> <button id="join">Join Game</button></div>
<div id="game-container" style="display: none;">
<div><label for="guess">Your Guess:</label> <input id="guess" type="number"/> <button id="guess-btn">Guess</button></div>
<div id="game-info">
<div id="guesses-container">
<ul id="guesses-list"></ul>
</div>
<div id="players-container">
<ul id="player-list"></ul>
</div>
</div>
</div>
<p><a href="http://229.cycu.org:88/">來源</a></p>
<p>-------------------</p>
<p><a href="https://localhost:9447/?semester=1121&amp;classid=%E5%9B%9B%E4%BC%81%E7%AE%A1%E4%B8%89%E7%94%B2">課表.第一學期</a></p>
<p><img alt="" height="672" src="/images/112.2.png" width="498"/></p>
<p><a href="https://localhost:9447/?semester=1122&amp;classid=%E5%9B%9B%E4%BC%81%E7%AE%A1%E4%B8%89%E7%94%B2">課表第二學期</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS

import requests
import bs4

'''
機械設計系各班 classid:
42310: 42310四設計一訓

42311: 42311四設計一甲
42312: 42312四設計一乙

42319: 42319四設計系一攜
42320: 42320四設計二訓

42321: 42321四設計二甲
42322: 42322四設計二乙

42329: 42329四設計系二攜
42330: 42330四設計三訓

42331: 42331四設計三甲
42332: 42332四設計三乙

42339: 42339四設計系三攜
42340: 42340四設計四訓

42341: 42341四設計四甲
42342: 42342四設計四乙

42349: 42349四設計系四攜
44631: 44631四企管三甲

第 112 學年第 2 學期, 查詢設一甲的班級課表

https://localhost:9447/?semester=1122&amp;classid=設一甲
'''
# 將班級中文縮寫與代號存入 mde dict

mde ={
"設一訓": "42310",
"設一甲": "42311",
"設一乙": "42312",
"設一攜": "42319",
"設二訓": "42320",
"設二甲": "42321",
"設二乙": "42322",
"設二攜": "42329",
"設三訓": "42330",
"設三甲": "42331",
"設三乙": "42332",
"設三攜": "42339",
"設四訓": "42340",
"設四甲": "42341",
"設四乙": "42342",
"設四攜": "42349",
"四企管三甲": "44631"
}

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    classid = request.args.get('classid')
    column = request.args.get('column')

    if semester == None:
        semester = '1121'
    if classid == None:
        #設一甲
        classid = '設一甲'
    # 透過 mde dict 將班級中文縮寫轉為代號
    try:
        selclss = mde[classid]
    except:
        return "查無資料"

    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/jclass_ajax.php'
    #post_var = {'pselyr': semester, 'pselclss': classid}
    post_var = {'pselyr': semester, 'pselclss': selclss}

    result = requests.post(url, data = post_var, headers = headers)
    #soup = bs4.BeautifulSoup(result.content, 'lxml')
    soup = bs4.BeautifulSoup(result.content, 'lxml', from_encoding='utf-8')
    # 列出 soup 物件的字元
    #print(str(soup))
    table = soup.find('table', {'class': 'tbcls'})
    # 添加border屬性
    table['border'] = "1"
    # 返回帶有border屬性的table HTML
    table_html = table.prettify()
    return table_html
    #return  str(pselyr) + " + " +str(pseqno)

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=9447, debug=True, ssl_context="adhoc")</pre>
<p></p>
<h2>w6</h2>
<h3>第六週作業內容</h3>
<ol>
<li>
<p><span style="color: #000000; background-color: #ffff00;"><strong>Git </strong><strong>的發展歷史</strong></span></p>
<p><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">Git 是一個分散式版本控制軟體，最初<span style="color: #ff0000;">由林納斯·托瓦茲創作</span>，於2005年以 GPL 授權條款釋出</a><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">。最初目的是為了更好地管理 Linux核心 開發而設計</a><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">。Git 最初的開發動力來自於 BitKeeper 和 Monotone</a><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">。Git 最初只是作為一個可以被其他前端（比如Cogito或Stgit</a><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">）包裝的後端而開發的，<span style="color: #ff0000;">但後來Git核心已經成熟到可以獨立地用作版本控制</span></a><span style="color: #ff0000;">。</span></span></p>
<p><span style="color: #000000;"><a href="https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E7%9A%84%E7%B0%A1%E5%8F%B2" style="color: #000000;">在2002年時，Linux kernel 開始採用名為 BitKeeper 的商業分散式版本控制系統</a><a href="https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E7%9A%84%E7%B0%A1%E5%8F%B2" style="color: #000000;">。在2005年時，開發 Linux kernel 的社群與開發 BitKeeper 的商業公司的合作關係結束，也就無法再免費使用該工具</a><a href="https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E7%9A%84%E7%B0%A1%E5%8F%B2" style="color: #000000;">。這就迫使了 Linux 社群（特別是 Linux 之父 Linus Torvalds）基於使用 BitKeeper 所學到的經驗，來開發自有的工具</a><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;">。<span style="color: #ff0000;">這個系統必須達成下列目標：快速、簡潔的設計、完整支援非線性的開發（上千個同時進行的分支）、完全的分散式系統、能夠有效地處理像 Linux kernel 規模的專案（速度及資料大小）</span></a><span style="color: #ff0000;">。</span></span></p>
<p><span style="color: #000000; background-color: #ffff00;"><strong>創作人的相關履歷</strong></span></p>
<p><span style="color: #000000;"><span style="color: #ff0000;">林納斯·托瓦茲是 Git 的創作者，他也是 Linux 的創始人。</span>他在芬蘭赫爾辛基大學學習，並在1991年首次發布了 Linux。他的目標是創建一個自由且開放的作業系統。在2005年，他開始開發 Git，這是一個源於他對 Linux 核心開發的需求的項目。他的貢獻對開源社區產生了深遠影響，並且他的工作繼續影響著全球數以百萬計的開發者。</span></p>
<p><span style="color: #000000; background-color: #ffff00;"><strong>如何利用 Git </strong><strong>解決內容管理問題</strong></span></p>
<p><span style="color: #000000;">Git 是一個強大的工具，可以幫助開發者和團隊管理和追蹤專案的變更。以下是一些使用 Git 解決內容管理問題的方法：</span></p>
<ol>
<li><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;"><strong>版本控制</strong>：Git 提供了一種機制，可以追蹤和管理文件的變更。這意味著您<span style="color: #ff0000;">可以查看文件的歷史版本，並在需要時恢復到任何特定版本</span></a><span style="color: #ff0000;">。</span></span></li>
<li><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;"><strong>分支和合併</strong>：<span style="color: #ff0000;">Git 允許開發者創建分支</span>，這是一種獨立於主開發線的工作流。這意味著您可以在不影響主代碼庫的情況下進行實驗或添加新功能。完成後，您可以將分支合併回主代碼庫</a>。</span></li>
<li><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;"><strong>協作</strong>：Git 的分散式性質意味著每個開發者都可以在本地工作，並將更改推送到<span style="color: #ff0000;">共享的代碼庫</span>。這使得<span style="color: #ff0000;">團隊協作變得更加容易</span></a>。</span></li>
<li><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;"><strong>衝突解決</strong>：當多個開發者在同一時間對同一文件進行更改時，可能會出現衝突。Git 提供了工具來幫助開發者識別和解決這些衝突</a>。</span></li>
</ol>
<p><span style="color: #000000; background-color: #ffff00;"><strong>在 Windows </strong><strong>實際 demo git client </strong><strong>與 git server</strong></span></p>
<p><span style="color: #000000;"><span style="background-color: #ffff00;">在 Windows 上設置 Git 客戶端和服務器的步驟如下</span>：</span></p>
<ol>
<li><span style="color: #000000;"><strong>安裝 Git</strong>：首先，您需要在您的 Windows 機器上安裝 Git。您可以從 Git 的官方網站下載並安裝它。</span></li>
<li><span style="color: #000000;"><a href="https://zh.wikipedia.org/zh-tw/Git" style="color: #000000;"><strong>設置 Git </strong><strong>服務器</strong>：如果您想在本地機器上設置一個 Git 服務器，您可以使用像 Bonobo Git Server 這樣的工具。只需將物理路徑設置為之前安裝 Bonobo Git Server 的路徑，並選擇一個未被占用的端口</a>。</span></li>
<li><span style="color: #000000;"><a href="https://ithelp.ithome.com.tw/articles/10323142" style="color: #000000;"><strong>使用 Git </strong><strong>客戶端</strong>：有許多 Git 客戶端可供選擇，包括命令行工具和圖形用戶界面。一個常見的選擇是 GitHub Desktop，它提供了一個易於使用的界面，可以克隆存儲庫，提交更改，並與遠程存儲庫同步</a>。</span></li>
</ol>
<p><span style="color: #000000;"><strong>GitHub </strong><strong>操作流程</strong></span></p>
<p><span style="color: #000000;">GitHub 是一個基於 Git 的在線服務，它提供了一個平台，開發者可以在上面托管和共享他們的代碼。以下是在 GitHub 上的一般操作流程：</span></p>
<ol>
<li><span style="color: #000000;"><a href="https://docs.github.com/zh/get-started/start-your-journey" style="color: #000000;"><strong>創建帳戶</strong>：首先，您需要在 GitHub 上創建一個帳戶</a>。</span></li>
<li><span style="color: #000000;"><a href="https://docs.github.com/zh/get-started/start-your-journey" style="color: #000000;"><strong>創建或克隆存儲庫</strong>：在 GitHub 上，您可以創建自己的存儲庫，或者克隆其他人的存儲庫</a>。</span></li>
<li><span style="color: #000000;"><a href="https://docs.github.com/zh/get-started" style="color: #000000;"><strong>提交更改</strong>：當您對存儲庫中的文件進行更改後，您可以提交這些更改。這將創建一個新的版本，並將其保存在 Git 歷史中</a>。</span></li>
<li><span style="color: #000000;"><a href="https://docs.github.com/zh/get-started" style="color: #000000;"><strong>推送和拉取</strong>：您可以將您的更改推送到 GitHub 存儲庫，以便其他人可以看到和訪問它們。同樣，您也可以拉取其他人的更改，以便將它們合併到您的本地版本</a>。</span></li>
<li><span style="color: #000000;"><a href="https://docs.github.com/zh/get-started" style="color: #000000;"><strong>處理拉取請求</strong>：如果您想將您的更改合併到主分支，或者如果您想貢獻到其他人的項目，您可以創建一個拉取請求。這是一種請求，要求其他人審查和接受您的更改</a>。</span></li>
</ol>
<p><span> </span></p>
</li>
</ol>
<p><br/><br/></p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>